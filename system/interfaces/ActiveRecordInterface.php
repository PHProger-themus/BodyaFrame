<?php

namespace system\interfaces;

use system\core\ActiveRecord;

interface ActiveRecordInterface extends QueryBuilderInterface {
    
    const GET_FIRST = 0;
    const GET_LAST = 1;

//    /**
//     * Возвращает название таблицы исходя из названия вызывающего класса с префиксом.
//     * @return string Название класса.
//     */
//    public static function getTableName() : string;
//
//    /**
//     * Сохраняет данные в таблицу, либо обновляет их. Обновление происходит, если у объекта имеется свойство "id" и его значение было найдено в таблице, иначе же осуществляется вставка.
//     */
//    public function save() : void;
//
//    /**
//     * Производит выборку из таблицы. Вызывается статически из "класса-таблицы", функция определяет саму таблицу по названию класса, формирует начальный SELECT-запрос и возвращает ActiveRecord объект для указания дальнейших условий выборки стандартными методами, например, where().
//     * @param array $columns Столбцы, которые требуется отобразить.
//     * @param bool $distinct Использовать ли в запросе ключевое слово DISTINCT.
//     * @return static ActiveRecord объект
//     */
//    public static function select(array $columns = [], bool $distinct = false) : self;
//
//    /**
//     * Возвращает все найденные строки после соответствующей выборки.
//     * @return array Массив с объектами класса нужной таблицы, в которых содержатся результирующие свойства.
//     */
//    public function all() : array;
//
//    /**
//     * Возвращает одну строку после соответствующей выборки. Полезно, если в результате может быть только одна строка, метод all() образует массив из одного элемента, здесь же в результате сразу будет объект.
//     * @param int $type Способ вывода результата, если их несколько: <ul><li>__CLASS__::GET_FIRST - вернуть первую строку</li><li>__CLASS__::GET_LAST - вернуть последнюю строку</li></ul>
//     * @return static Объект класса используемой таблицы.
//     */
//    public function one(int $type = self::GET_FIRST) : self;
//
//    /**
//     * Обновление одной строки в таблице, вызывается из "объекта-строки".
//     * @param array $changes Ассоциативный массив, ключ - поле, подвергающееся изменениям, значение - собственно, значение.
//     */
//    public function update(array $changes = []) : void;
//
//    /**
//     * Обновление нескольких строк в таблице, вызывается из "класса-таблицы".
//     * @param array $objects Массив объектов, которые требуется изменить.
//     * @param array $changes Ассоциативный массив, ключ - поле, подвергающееся изменениям, значение - собственно, значение.
//     */
//    public static function update_all(array $objects, array $changes = []) : void;
//
//    /**
//     * Удалить строку из таблицы, вызывается из "объекта-строки".
//     */
//    public function delete() : void;
//
//    /**
//     * Удаление нескольких строк из таблицы, вызывается из "класса-таблицы".
//     * @param array $objects Массив объектов, которые требуется удалить.
//     */
//    public static function deleteAll(array $objects) : void;
//
//    /**
//     * Получение данных из другой таблицы по связям "один-ко-многим" или "многие-ко-многим", вызывается из "объекта-строки". <br>
//     * Первые два параметра - обязательны, указывают на данные из второй таблицы, которые следует связать с объектом. Если заданы последние два параметра, используется связь "многие-ко-многим", где эти два параметра указывают на связывающую таблицу.<br><br>
//     * <b>Пример:</b> есть таблицы <b>users</b> (столбцы id_user, ...), <b>groups</b> (столбцы id_group, ...) и <b>users_to_groups</b> (столбцы id, utg_id_user, utg_id_group). Мы работаем с таблицей users, тогда, чтобы получить для каждого объекта-пользователя массив объектов groups, мы выполняем эту функцию следующим образом:<br>
//     * $user->getOwnRecords('Groups', ['id_group', 'utg_id_group'], 'UsersToGroups', ['utg_id_user', 'id_user']);
//     * @param string $classname Название класса второй таблицы.
//     * @param array $link Массив из двух элементов, обозначающий столбцы, которые связывают таблицы, первый элемент - столбец из второй таблицы, второй - столбец из текущей таблицы. Если используется связь "многие-ко-многим", второй элемент - столбец из связующей таблицы, относящийся ко второй таблице.
//     * @param string|null $using_classname Название класса связующей таблицы
//     * @param array|null $using_link Массив из двух элементов, обозначающий столбцы, которые связывают текущую и связующую таблицы, первый элемент - столбец связующей таблицы, второй - столбец текущей таблицы, связанный со связующей.
//     */
//    public function getOwnRecords(string $classname, array $link, string $using_classname = null, array $using_link = null) : void;
//
//    /**
//     * Получение данных из другой таблицы по связи "один-к-одному".
//     * @param ActiveRecord $model Название класса второй таблицы.
//     * @param array $link Массив из двух элементов, обозначающий столбцы, которые связывают таблицы, первый элемент - столбец из второй таблицы, второй - столбец из текущей таблицы.
//     */
//    public function getOwnRecord(ActiveRecord $model, array $link) : void;
    
}
